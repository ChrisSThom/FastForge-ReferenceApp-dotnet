resources:
  repositories:
    - repository: self
      type: git  
      ref: refs/heads/master #Update to reflect actual branch, likely "refs/heads/master"
      trigger: none

variables:
- template: 'stage-apiWebApp-variables.yml'

stages:
- stage: BuildTestStageApi
  displayName: 'API: Build, Test and Stage'
  
  jobs:
  - job: BuildAndRunAPIUnitTests
    displayName: "Build and Test API"
    dependsOn: []

    pool:
      vmImage: ${{ variables.apiBuildVmImage }}
  
    steps:
    - checkout: self
      submodules: true
  
    - task: CmdLine@2
      displayName: 'Dump Environment Variables'
      inputs:
        script: 'printenv'
    
    - task: DotNetCoreCLI@2
      displayName: 'install dotnet format'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'update -g dotnet-format'
    
    - task: CmdLine@2
      displayName: 'Lint dotnet'
      inputs:
        script: '$HOME/.dotnet/tools/dotnet-format --check --verbosity diagnostic ${{ variables.apiSolution }}'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore ${{ variables.apiSolution }}'
      inputs:
        command: 'restore'
        projects: '${{ variables.apiSolution }}'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build ${{ variables.apiSolution }} --configuration ${{ variables.buildConfiguration }}'
      inputs:
        command: 'build'
        projects: '${{ variables.apiSolution }}'
        arguments: '-- configuration ${{ variables.buildConfiguration }}'

    - task: DotNetCoreCLI@2
      displayName: "Run ALL Tests and Collect Code Coverage"
      inputs:
        command: 'test'
        projects: '${{ variables.apiSolutionRoot }}/**/*Tests/*.csproj'
        arguments: '--verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

    - task: DotNetCoreCLI@2
      displayName: 'Install Custom Tool: ReportGenerator Tool'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --tool-path . dotnet-reportgenerator-globaltool'

    - task: CmdLine@2
      displayName: 'Create Reports'
      inputs:
        script: './reportgenerator -reports:${{ variables.apiSolutionRoot }}/**/coverage.cobertura.xml -targetdir:${{ variables.apiSolutionRoot }}/CoverageReport -reporttypes:"HtmlInline_AzurePipelines;Cobertura;Badges" -sourcedir:${{ variables.apiSolutionRoot }}'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish API Code Coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '${{ variables.apiSolutionRoot }}/**/coverage.cobertura.xml'
        reportDirectory: '${{ variables.apiSolutionRoot }}/CoverageReport'
    
    - task: DotNetCoreCLI@2
      displayName: 'Stage API Build Artifacts'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '${{ variables.apiProject }}'
        arguments: '--configuration ${{ variables.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/api'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: PublishPipelineArtifact@1
      displayName: 'Publish API Artifacts: api-drop'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'api-drop'
        publishLocation: 'pipeline'

    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: ${{ variables.containerRegistryServiceConnection }}
        
    - task: Docker@2
      displayName: Build Docker Image and Push to Registry
      inputs:
        containerRegistry: ${{ variables.containerRegistryServiceConnection }}
        repository: 'referenceApp.Api'
        command: 'buildAndPush'
        Dockerfile: ${{ variables.apiDockerFilePath }}
        tags:

- stage: BuildTestStageWebApp
  displayName: 'WEBAPP: Build, Test and Stage'

  jobs:
  - job: BuildWebApp
    displayName: "Build, Test and Stage Web App"
    dependsOn: []

    pool:
      vmImage: ${{ variables.webappBuildVMImage }}

    steps:
    - checkout: self

    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        yarn install
      displayName: 'Yarn install'
      workingDirectory: ${{ variables.webAppSolutionRoot }}

    - script: |
        yarn run eslint --fix-dry-run "${{ variables.webAppSolutionRoot }}/src/**"
      displayName: 'Static Code Analysis with ESLINT'
      workingDirectory: ${{ variables.webAppSolutionRoot }}

    - script: |
        yarn build:development
      displayName: 'DEVELOPMEMNT Yarn Build'
      workingDirectory: ${{ variables.webAppSolutionRoot }}
      env:
        CI: true
        REACT_APP_ENV: development

    - script: yarn test ---coverage --watchAll=false --reporters="jest-trx-results-processor"
      displayName: 'Yarn Test and Code Coverage'
      workingDirectory: ${{ variables.webAppSolutionRoot }}

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/test-results.trx'

    - task: CopyFiles@2
      displayName: Stage DEVELOPMENT Build
      inputs:
        sourceFolder: ${{ variables.webAppBuildDestination }} # Optional
        contents: '**' 
        targetFolder: '$(Build.ArtifactStagingDirectory)/development_build'

    - script: |
        yarn build:test
      displayName: 'TEST Yarn Build'
      workingDirectory: ${{ variables.webAppSolutionRoot }}
      env:
        CI: true
        REACT_APP_ENV: test

    - task: CopyFiles@2
      displayName: Stage TEST Build
      inputs:
        sourceFolder: ${{ variables.webAppBuildDestination }} # Optional
        contents: '**' 
        targetFolder: '$(Build.ArtifactStagingDirectory)/test_build'

    - script: |
        yarn build:production
      displayName: 'PRODUCTION Yarn Build'
      workingDirectory: ${{ variables.webAppSolutionRoot }}
      env:
        CI: true
        REACT_APP_ENV: production

    - task: CopyFiles@2
      displayName: Stage PRODUCTION Build
      inputs:
        sourceFolder: ${{ variables.webAppBuildDestination }} # Optional
        contents: '**' 
        targetFolder: '$(Build.ArtifactStagingDirectory)/production_build'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Web App Artifacts - web-app-drop'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'web-app-drop'
        publishLocation: 'pipeline'
